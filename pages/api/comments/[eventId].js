import {
  connectDatabase,
  insertDocument,
  getAllDocuments,
} from "../../../helpers/db-util";
//import { getAllDocuments } from "../../helpers/db-util";

async function handler(req, res) {
  const eventId = req.query.eventId; // extracting ID from URL

  // connecting to MongoDB
  let client;
  try {
    client = await connectDatabase();
  } catch (error) {
    res.status(500).json({ message: "Connecting to the DB failed!" });
    return;
  }

  /******************************************/
  // POST REQUEST
  if (req.method === "POST") {
    const { email, name, text } = req.body;
    // extracting three pieces of data (email, name, text)

    // server-side validation and check if send (entered) data is correct
    if (
      !email.includes("@") ||
      !name ||
      name.trim() === "" ||
      !text ||
      text.trim() === ""
      //  trim() method removes whitespace from both ends of a string and returns a new string, without modifying the original string.
    ) {
      res.status(422).json({ message: "Invalid input." }); //  422 stands invalid input
      client.close();
      return; // with "return" code will STOP here and will not proceed
    }

    const newComment = {
      //  id: new Date().toISOString(), // do not need anymore hardcod ID because MongoDB will create by default new ID
      email, // it is the same als email: email
      name,
      text,
      eventId,
      // We want to use this "eventId" (which is encoded in the URL). So we make it clear to which event our comment is related to.
    };

    let result;

    try {
      //  accessing and inserting in to DB
      result = await insertDocument(client, "comments", newComment);
      newComment._id = result.insertedId; //
      // if we console.log(results) we will see that "insertedId" is holding our id.
      // So that the "newComment", which we sent back to the frontend, also contains this unique id that was generated by MongoDB

      res.status(201).json({ message: "Added comment.", comment: newComment });
    } catch (error) {
      res.status(500).json({ message: "Inserting data failed!" });
    }
  }

  /******************************************/
  // GET REQUEST
  if (req.method === "GET") {
    // If the method is not defined then it is by default "GET" method

    let documents;

    try {
      documents = await getAllDocuments(
        client,
        "comments",
        { _id: -1 },
        { eventId: eventId }
      );
      res.status(200).json({ comments: documents });
      // 200 success status
    } catch (error) {
      res.status(500).json({ message: "Getting comments faild" });
    }
  }

  client.close();
}

export default handler;
